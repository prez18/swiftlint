# document: https://github.com/realm/SwiftLint
# 参考: https://qiita.com/shtnkgm/items/6dd756aa14926736c6f5
# 各ルールの説明
# swiftLintのバージョン: 0.42.0
# 以下にはすべてのルールを明記して設定すること

# 無効にするルール
disabled_rules:
- block_based_kvo # Swift 3.2以降を使用する場合は、キーパスを持つ新しいブロックベースのKVO APIを優先します。
- class_delegate_protocol # 委譲プロトコルはクラスのみであるべきであり、弱く参照できるようにすべきである。
- closing_brace # 閉じ括弧で閉じる中括弧は、途中に空白があってはいけません。
- closure_parameter_position # クロージャーのパラメータは、オープニングブレースと同じライン上にある必要があります。
- colon # 型を指定する場合は識別子の隣に、辞書リテラルの場合はキーの隣にコロンを使用します。
- comma
- comment_spacing # コンマの前後にスペースを入れてはいけません。
- compiler_protocol_init # ExpressibleByArrayLiteral のようなコンパイラプロトコルで宣言されたイニシャライザは直接呼ばれるべきではありません。
- computed_accessors_order # 計算型プロパティと添え字のゲッターとセッターは、一貫した順序である必要があります。
- control_statement # if, for, guard, switch, while, および catch 文は、不必要に条件式や引数を括弧で囲むべきではありません。
- custom_rules # 正規表現文字列を指定してカスタムルールを作成します。オプションで、マッチする構文の種類、深刻度のレベル、表示するメッセージを指定できます。
- cyclomatic_complexity # 機能体の複雑さは限定されるべきである。
- deployment_target # 可用性チェックや属性は、デプロイメント ターゲットが満たす古いバージョンを使用すべきではありません。
- discarded_notification_center_observer # ブロックを使用して通知を登録する場合、返された不透明なオブザーバは後で削除できるように保存しておく必要があります。
- discouraged_direct_init # 有害な可能性のある型の直接初期化を不推奨。
- duplicate_enum_cases # Enumには、同じ名前の複数のケースを含めることはできません。
- duplicate_imports # importはユニークなものでなければなりません。
- dynamic_inline # `dynamic`と`@inline(__always)`の併用は避けてください。
- empty_enum_arguments # 引数は、関連付けられた値を持つ列挙型をマッチングする際に、使用しない場合には省略することができます。
- empty_parameters # `Void -> `よりも優先的に` () -> `を優先します。
- empty_parentheses_with_trailing_closure # 後続のクロージャを使用する場合は、メソッド呼び出しの後に空の括弧を避ける必要があります。
- file_length # ファイルはあまり多くの行にまたがってはいけません。
- for_where # ここでは、forの中にある単一のifよりも節の方が優先されます。
- force_cast # フォースキャストは避けるべきです。
- force_try # 強制的なトライは避けるべきです。
- function_body_length # 関数体はあまり多くの行にまたがってはいけません。
- function_parameter_count # 関数パラメータの数が少ないこと。
- generic_type_name # 一般的なタイプ名は、英数字のみを含み、大文字で始まり、長さは1～20文字でなければなりません。
- identifier_name # 識別子名は、英数字のみを含み、小文字で始まるか、大文字のみを含むべきです。上記の例外として、変数名が静的で不変であると宣言されている場合には、大文字で始まることがあります。変数名は長すぎても短すぎてもいけません。
- implicit_getter # 読み取り専用の計算型プロパティと添え字は、get キーワードの使用を避ける必要があります。
- inclusive_language # アイデンティファイヤは、人種、性別、社会経済的地位に基づく差別を避けるために、包括的な言語を使用しなければなりません。
- inert_defer # deferがその親スコープの最後にある場合、それはいずれにしてもその場所で実行されます。
- is_disjoint # Set.intersection(_:).isEmptyよりもSet.isDisjoint(with:)を使用することをお勧めします。
- large_tuple # タプルはあまり多くのメンバーを持つべきではありません。代わりにカスタム型を作成します。
- leading_whitespace # ファイルには、先頭に空白を含めてはいけません。
- legacy_cggeometry_functions # 構造体の拡張プロパティとメソッドは、レガシー関数よりも優先されます。
- legacy_constant # 構造スコープ付き定数は、レガシーなグローバル定数よりも優先されます。
- legacy_constructor # Swift のコンストラクタは、レガシーな便利関数よりも優先されます。
- legacy_hashing # hashValue をオーバーライドする代わりに hash(into:) 関数を使用することを推奨します。
- legacy_nsgeometry_functions # 構造体の拡張プロパティとメソッドは、レガシー関数よりも優先されます。
- line_length # 行はあまり多くの文字にまたがってはいけません。
- mark # MARK コメントは有効なフォーマットでなければなりません。
- multiple_closures_with_trailing_closure # 複数のクロージャの引数を渡す場合は、末尾のクロージャ構文を使用しないでください。
- nesting # 型は最大でも1レベル深いところで入れ子にし、関数は最大でも2レベル深いところで入れ子にする必要があります。
- no_fallthrough_only # フォールスルーは、ケースに少なくとも1つの他のステートメントが含まれている場合にのみ使用することができます。
- no_space_in_method_call # メソッド名とカッコの間にスペースを入れないでください。
- notification_center_detachment # オブジェクトは deinit でオブザーバーとしての自分自身を削除するだけです。
- nsobject_prefer_isequal # NSObject のサブクラスは == の代わりに isEqual を実装する必要があります。
- opening_brace # 開いている中括弧の前には半角スペースを入れ、宣言と同じ行にしてください。
- operator_whitespace # 演算子を使用しているときは、単一の空白で囲む必要があります。
- orphaned_doc_comment # 宣言にはdocのコメントを添付する必要があります。
- private_over_fileprivate # ファイル・プライベート宣言よりもプライベートを優先します。
- private_unit_test # プライベートとマークされたユニットテストは、静かにスキップされます。
- protocol_property_accessors_order # プロトコルでプロパティを宣言する際には、アクセサの順番を設定する必要があります。
- reduce_boolean # reduce(true) や reduce(false) よりも .allSatisfy() や .contains() を使用することを推奨します。
- redundant_discardable_let # 関数の結果を破棄する場合は、 let _ = foo() よりも _ = foo() を優先します。
- redundant_objc_attribute # Objective-C属性(@objc)は宣言では冗長です。
- redundant_optional_initialization # オプション変数を nil で初期化するのは冗長です。
- redundant_set_access_control # プロパティセッターのアクセスレベルが変数のアクセスレベルと同じであれば、明示的にすべきではありません。
- redundant_string_enum_value # 文字列のenum値は、enumcase名と等しい場合には省略することができます。
- redundant_void_return # 関数宣言で Void を返すのは冗長です。
- return_arrow_whitespace # 戻り値の矢印と戻り値のタイプは、1つのスペースで区切るか、別の行で区切ってください。
- shorthand_operator # 操作をして代入するよりも、速記演算子(+=, -=, *=, /=)を優先してください。
- statement_position # Else と catch は同一行に、前の宣言の後に 1 スペースを空けて記述します。
- superfluous_disable_command # SwiftLintの'disable'コマンドは、無効化されたルールが無効化された領域で違反を誘発しなかった場合、余計なものです。コマンドを文書化したい場合は、" - "を使用してください。
- switch_case_alignment # 大文字小文字のステートメントは、それを囲むスイッチステートメントと垂直に揃える必要があります。
- syntactic_sugar # 省略可能な構文上の糖質は、Array の代わりに [Int] を使用します。
- todo # TODOとFIXMEは解決すべきです。
- trailing_comma # 配列や辞書のトレーリングカンマは避けるべきです。
- trailing_newline # ファイルの末尾には改行を1つ入れてください。
- trailing_semicolon # 行の末尾にセミコロンを付けてはいけません。
- trailing_whitespace # 行の末尾に空白を入れてはいけません。
- type_body_length # タイプボディはあまり多くの行にまたがってはいけません。
- type_name # タイプ名は英数字のみを含み、大文字で始まり、長さは3文字から40文字の間でなければなりません。
- unneeded_break_in_switch # 不要なbreak文の使用を避ける。
- unused_capture_list # キャプチャリスト内の未使用の参照は削除されるべきです。
- unused_closure_parameter # クロージャ内の未使用のパラメータは _ に置き換えてください。
- unused_control_flow_label # 未使用の制御フローラベルは削除する必要があります。
- unused_enumerated # インデックスや項目を使用しない場合は、.enumerated()を削除することができます。
- unused_optional_binding # let _ = よりも != nil を優先します。
- unused_setter_value # セッター値は使用しません。
- valid_ibinspectable # IBInspectableは変数にのみ適用され、その型は明示的で、サポートされている型でなければなりません。
- vertical_parameter_alignment # 関数のパラメータが宣言内の複数行にある場合は、垂直方向に整列させる必要があります。
- vertical_whitespace # 垂直方向の空白を空行1行に制限します。
- void_return # ` () -> `よりも優先的に`Void -> `を優先します。
- weak_delegate # delegateは、循環参照を避けるために弱参照にするである。
- xctfail_message # XCTFailコールにはアサーションの説明を含める必要があります。

# opt-inルールの中で無効にするルール
# オプションのルールは、有効にしない。
- anyobject_protocol
- array_init
- attributes
- closure_body_length
- closure_end_indentation
- closure_spacing
- collection_alignment
- conditional_returns_on_newline
- contains_over_filter_count
- contains_over_filter_is_empty
- contains_over_first_not_nil
- contains_over_range_nil_comparison
- convenience_type
- discouraged_object_literal
- discouraged_optional_boolean
- discouraged_optional_collection
- empty_collection_literal
- empty_count
- empty_string
- empty_xctest_method
- enum_case_associated_values_count
- expiring_todo
- explicit_acl
- explicit_enum_raw_value
- explicit_init
- explicit_self
- explicit_top_level_acl
- explicit_type_interface
- extension_access_modifier
- fallthrough
- fatal_error_message
- file_header
- file_name
- file_name_no_space
- file_types_order
- first_where
- flatmap_over_map_reduce
- force_unwrapping
- function_default_parameter_at_end
- ibinspectable_in_extension
- identical_operands
- implicit_return
- implicitly_unwrapped_optional
- indentation_width
- joined_default_parameter
- last_where
- legacy_multiple
- legacy_random
- let_var_whitespace
- literal_expression_end_indentation
- lower_acl_than_parent
- missing_docs
- modifier_order
- multiline_arguments
- multiline_arguments_brackets
- multiline_function_chains
- multiline_literal_brackets
- multiline_parameters
- multiline_parameters_brackets
- nimble_operator
- no_extension_access_modifier
- no_grouping_extension
- nslocalizedstring_key
- nslocalizedstring_require_bundle
- number_separator
- object_literal
- operator_usage_whitespace
- optional_enum_case_matching
- overridden_super_call
- override_in_extension
- pattern_matching_keywords
- prefer_nimble
- prefer_self_type_over_type_of_self
- prefer_zero_over_explicit_init
- prefixed_toplevel_constant
- private_action
- private_outlet
- prohibited_interface_builder
- prohibited_super_call
- quick_discouraged_call
- quick_discouraged_focused_test
- quick_discouraged_pending_test
- raw_value_for_camel_cased_codable_enum
- reduce_into
- redundant_nil_coalescing
- redundant_type_annotation
- required_deinit
- required_enum_case
- single_test_class
- sorted_first_last
- sorted_imports
- static_operator
- strict_fileprivate
- strong_iboutlet
- switch_case_on_newline
- test_case_accessibility
- toggle_bool
- trailing_closure
- type_contents_order
- unavailable_function
- unneeded_parentheses_in_closure_argument
- unowned_variable_capture
- untyped_error_in_catch
- unused_declaration
- unused_import
- vertical_parameter_alignment_on_call
- vertical_whitespace_between_cases
- vertical_whitespace_closing_braces
- vertical_whitespace_opening_braces
- xct_specific_matcher
- yoda_condition

# defaultルール以外にopt-inから採用するルール
opt_in_rules:
# オプションのルールは、有効にしない。

# Lint対象に追加するパス
included:
- SwiftLintSample
- SwiftLintSampleTests
- SwiftLintSampleUITests

# Lint対象から除外するパス
excluded:
- Carthage
- Pods
- MyLibraryDemoTests
